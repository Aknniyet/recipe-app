const User = require("../models/User");
const Recipe = require("../models/Recipe");

// üìå **–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ**
exports.toggleFavorite = async (req, res) => {
    try {
        const { recipeId } = req.body;
        if (!recipeId) return res.status(400).json({ message: "Recipe ID is required" });

        const recipe = await Recipe.findById(recipeId);
        if (!recipe) return res.status(404).json({ message: "Recipe not found" });

        const user = await User.findById(req.user.id);
        if (!user) return res.status(404).json({ message: "User not found" });

        const index = user.favorites.indexOf(recipeId);
        if (index === -1) {
            user.favorites.push(recipeId);
        } else {
            user.favorites.splice(index, 1);
        }

        await user.save();
        res.json({ favorites: user.favorites });
    } catch (error) {
        res.status(500).json({ message: "Server error", error });
    }
};


// üìå **–ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
exports.getFavorites = async (req, res) => {
    try {
        const user = await User.findById(req.user.id).populate("favorites");
        res.json(user.favorites);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", error });
    }
};

// üìå **–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ª–∞–π–∫**
exports.toggleLike = async (req, res) => {
    try {
        const { recipeId } = req.body; // ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è req.body –≤–º–µ—Å—Ç–æ req.params
        if (!recipeId) return res.status(400).json({ message: "Recipe ID is required" });

        const user = await User.findById(req.user.id);
        if (!user) return res.status(404).json({ message: "User not found" });

        const index = user.likes.indexOf(recipeId);
        if (index === -1) {
            user.likes.push(recipeId);
        } else {
            user.likes.splice(index, 1);
        }

        await user.save();
        res.json({ message: "Likes updated", likes: user.likes });
    } catch (error) {
        res.status(500).json({ message: "Server error" });
    }
};
