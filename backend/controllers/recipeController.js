const Recipe = require('../models/Recipe');
const multer = require('multer');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const storage = multer.diskStorage({
    destination: 'uploads/',
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage });
exports.upload = upload.single('image'); // Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

// üìå **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π**
exports.createRecipe = async (req, res) => {
    try {
        const { title, ingredients, instructions, category } = req.body;
        
        if (!title || !ingredients || !instructions || !category) {
            return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const allowedCategories = ["Breakfast", "Lunch", "Dinner", "Dessert", "Drinks"]; // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!allowedCategories.includes(category.trim())) {
            return res.status(400).json({ message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" });
        }

        const existingRecipe = await Recipe.findOne({ title: title.trim() });
        if (existingRecipe) {
            return res.status(400).json({ message: "–†–µ—Ü–µ–ø—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        const imagePath = req.file ? `/uploads/${req.file.filename}` : null;

        const newRecipe = new Recipe({
            title: title.trim(),
            ingredients: ingredients.split(',').map(i => i.trim()), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã —É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            instructions: instructions.trim(),
            category: category.trim(),
            image: imagePath,
            createdBy: req.user.id
        });

        await newRecipe.save();
        res.status(201).json(newRecipe);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞" });
    }
};


// üìå **–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**
exports.getRecipes = async (req, res) => {
    try {
        const { category, search, page = 1, limit = 10 } = req.query;
        const filter = {};

        if (category) filter.category = category;
        if (search) filter.title = { $regex: search, $options: "i" }; // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)

        const recipes = await Recipe.find(filter)
            .populate('createdBy', 'username')
            .sort({ createdAt: -1 })
            .skip((page - 1) * limit) // –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            .limit(parseInt(limit));

        res.json(recipes);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤" });
    }
};


// üìå **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID**
exports.getRecipeById = async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id)
            .populate('createdBy', 'username _id');

        if (!recipe) return res.status(404).json({ message: "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        res.json(recipe);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞" });
    }
};

// üìå **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π**
exports.updateRecipe = async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id);
        if (!recipe) return res.status(404).json({ message: "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        if (recipe.createdBy.toString() !== req.user.id && req.user.role !== "admin") {
            return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }

        if (req.body.title) {
            const existingRecipe = await Recipe.findOne({ title: req.body.title.trim() });
            if (existingRecipe && existingRecipe._id.toString() !== recipe._id.toString()) {
                return res.status(400).json({ message: "–†–µ—Ü–µ–ø—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
            }
            recipe.title = req.body.title.trim();
        }

        if (req.body.ingredients) recipe.ingredients = req.body.ingredients.split(",").map(i => i.trim());
        if (req.body.instructions) recipe.instructions = req.body.instructions.trim();
        if (req.body.category) recipe.category = req.body.category.trim();

        if (req.file) {
            if (recipe.image) {
                const oldImagePath = path.join(__dirname, "..", recipe.image);
                if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);
            }
            recipe.image = `/uploads/${req.file.filename}`;
        }

        await recipe.save();
        res.json({ message: "–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", recipe });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞" });
    }
};


// üìå **–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞**
exports.deleteRecipe = async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id);
        if (!recipe) return res.status(404).json({ message: "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        if (recipe.createdBy.toString() !== req.user.id && req.user.role !== "admin") {
            return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }

        if (recipe.image) {
            const imagePath = path.join(__dirname, "..", recipe.image);
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
        }

        await Recipe.deleteOne({ _id: req.params.id });

        return res.json({ message: "–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞" });
    }
};

exports.getCategories = async (req, res) => {
    try {
        const categories = await Recipe.distinct("category", { category: { $ne: "" } }); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        res.json(categories);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π" });
    }
};


// üìå **–ê–≥—Ä–µ–≥–∞—Ü–∏—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**
exports.getRecipeStatistics = async (req, res) => {
    try {
        const { days } = req.query;
        const filterDate = new Date();
        filterDate.setDate(filterDate.getDate() - (days ? parseInt(days) : 30));

        const stats = await Recipe.aggregate([
            { $match: { category: { $ne: "" }, createdAt: { $gte: filterDate } } },
            { $group: { _id: "$category", count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);

        const totalRecipes = await Recipe.countDocuments(); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤

        res.json({ totalRecipes, stats });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
    }
};

